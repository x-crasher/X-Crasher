#!/usr/bin/env python3
import os
import sys
import ctypes
import subprocess
from ctypes import wintypes

# Constants from Windows API
PROCESS_ALL_ACCESS = 0x1F0FFF
MEM_COMMIT = 0x1000
MEM_RESERVE = 0x2000
PAGE_READWRITE = 0x4

# Load required libraries
kernel32 = ctypes.WinDLL('kernel32', use_last_error=True)
ntdll = ctypes.WinDLL('ntdll', use_last_error=True)

# Setup Windows API functions
OpenProcess = kernel32.OpenProcess
OpenProcess.argtypes = [wintypes.DWORD, wintypes.BOOL, wintypes.DWORD]
OpenProcess.restype = wintypes.HANDLE

VirtualAllocEx = kernel32.VirtualAllocEx
VirtualAllocEx.argtypes = [wintypes.HANDLE, wintypes.LPVOID, ctypes.c_size_t, wintypes.DWORD, wintypes.DWORD]
VirtualAllocEx.restype = wintypes.LPVOID

WriteProcessMemory = kernel32.WriteProcessMemory
WriteProcessMemory.argtypes = [wintypes.HANDLE, wintypes.LPVOID, wintypes.LPCVOID, ctypes.c_size_t, ctypes.POINTER(ctypes.c_size_t)]
WriteProcessMemory.restype = wintypes.BOOL

GetProcAddress = kernel32.GetProcAddress
GetProcAddress.argtypes = [wintypes.HMODULE, wintypes.LPCSTR]
GetProcAddress.restype = wintypes.LPVOID

GetModuleHandleW = kernel32.GetModuleHandleW
GetModuleHandleW.argtypes = [wintypes.LPCWSTR]
GetModuleHandleW.restype = wintypes.HMODULE

CreateRemoteThread = kernel32.CreateRemoteThread
CreateRemoteThread.argtypes = [wintypes.HANDLE, ctypes.POINTER(wintypes.SECURITY_ATTRIBUTES), ctypes.c_size_t, wintypes.LPVOID, wintypes.LPVOID, wintypes.DWORD, ctypes.POINTER(wintypes.DWORD)]
CreateRemoteThread.restype = wintypes.HANDLE

WaitForSingleObject = kernel32.WaitForSingleObject
WaitForSingleObject.argtypes = [wintypes.HANDLE, wintypes.DWORD]
WaitForSingleObject.restype = wintypes.DWORD

CloseHandle = kernel32.CloseHandle
CloseHandle.argtypes = [wintypes.HANDLE]
CloseHandle.restype = wintypes.BOOL

class AdvancedInjector:
    def __init__(self):
        pass

    def list_processes(self, filter_name=None):
        """List running processes with optional filtering"""
        try:
            # This is a simplified version for Termux - on Windows you'd use EnumProcesses
            result = subprocess.run(['ps', '-A', '-o', 'pid,comm'], 
                                  capture_output=True, text=True)
            processes = []
            lines = result.stdout.split('\n')
            for line in lines[1:]:  # Skip header
                if line.strip():
                    pid, name = line.strip().split(maxsplit=1)
                    if not filter_name or filter_name.lower() in name.lower():
                        processes.append({'pid': int(pid), 'name': name})
            return processes
        except Exception as e:
            print(f"Error listing processes: {e}")
            return []

    def inject_dll(self, pid, dll_path):
        """Inject DLL into target process using CreateRemoteThread"""
        try:
            # Convert DLL path to Windows format if needed
            if not dll_path.startswith('/'):
                dll_path = os.path.abspath(dll_path)
            
            # Get process handle
            h_process = OpenProcess(PROCESS_ALL_ACCESS, False, pid)
            if not h_process:
                raise ctypes.WinError(ctypes.get_last_error())

            # Allocate memory in target process
            dll_path_encoded = dll_path.encode('utf-16le')
            alloc_size = len(dll_path_encoded) + 2  # +2 for null terminator
            remote_mem = VirtualAllocEx(h_process, None, alloc_size, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE)
            if not remote_mem:
                raise ctypes.WinError(ctypes.get_last_error())

            # Write DLL path to target process
            written = ctypes.c_size_t(0)
            if not WriteProcessMemory(h_process, remote_mem, dll_path_encoded, alloc_size, ctypes.byref(written)):
                raise ctypes.WinError(ctypes.get_last_error())

            # Get LoadLibraryW address
            kernel32_handle = GetModuleHandleW("kernel32.dll")
            load_library = GetProcAddress(kernel32_handle, "LoadLibraryW")

            # Create remote thread
            thread_id = wintypes.DWORD(0)
            h_thread = CreateRemoteThread(h_process, None, 0, load_library, remote_mem, 0, ctypes.byref(thread_id))
            if not h_thread:
                raise ctypes.WinError(ctypes.get_last_error())

            # Wait for thread to complete
            WaitForSingleObject(h_thread, -1)  # INFINITE

            # Clean up
            CloseHandle(h_thread)
            CloseHandle(h_process)
            
            return True
        except Exception as e:
            print(f"Injection failed: {e}")
            return False

def main():
    if len(sys.argv) < 2:
        print("Advanced DLL Injector for Termux")
        print("Usage:")
        print(f"  {sys.argv[0]} list [filter]        - List running processes")
        print(f"  {sys.argv[0]} inject <PID> <DLL>  - Inject DLL into process")
        return

    command = sys.argv[1]
    injector = AdvancedInjector()

    if command == "list":
        filter_name = sys.argv[2] if len(sys.argv) > 2 else None
        processes = injector.list_processes(filter_name)
        
        print("Running Processes:")
        print("PID\tName")
        print("----------------")
        for proc in processes:
            print(f"{proc['pid']}\t{proc['name']}")

    elif command == "inject":
        if len(sys.argv) < 4:
            print("Error: Missing arguments for inject command")
            print(f"Usage: {sys.argv[0]} inject <PID> <DLL_PATH>")
            return

        try:
            pid = int(sys.argv[2])
            dll_path = sys.argv[3]
            
            print(f"Attempting to inject {dll_path} into PID {pid}...")
            if injector.inject_dll(pid, dll_path):
                print("Injection successful!")
            else:
                print("Injection failed")
        except ValueError:
            print("Error: PID must be a number")
    else:
        print(f"Error: Unknown command '{command}'")

if __name__ == "__main__":
    main()